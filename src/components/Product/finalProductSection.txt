// import React, { useState } from "react";

// const ProductSection = () => {
//   const [selectedProductType, setSelectedProductType] = useState([]);
//   const [selectedCapacity, setSelectedCapacity] = useState("");
//   const [selectedCompartments, setSelectedCompartments] = useState("");
//   const [sortBy, setSortBy] = useState("Popularity");

//   const handleProductTypeChange = (e) => {
//     const { value, checked } = e.target;
//     if (checked) {
//       setSelectedProductType([...selectedProductType, value]);
//     } else {
//       setSelectedProductType(
//         selectedProductType.filter((type) => type !== value)
//       );
//     }
//   };

//   const handleCapacityChange = (e) => {
//     setSelectedCapacity(e.target.value);
//   };

//   const handleCompartmentsChange = (e) => {
//     setSelectedCompartments(e.target.value);
//   };

//   const handleSortByChange = (e) => {
//     setSortBy(e.target.value);
//   };

//   const handleClearFilters = () => {
//     setSelectedProductType([]);
//     setSelectedCapacity("");
//     setSelectedCompartments("");
//   };

//   return (
//     <div className="bg-white text-gray-900 font-sans bg-[#F0F9F4]">
//       <div className="max-w-7xl mx-auto px-4 py-10">
//         <div className="flex flex-col lg:flex-row gap-8">
//           <aside className="w-full lg:w-72 bg-white border border-gray-200 rounded-lg p-6 shadow-sm">
//             <h2 className="text-green-900 font-semibold text-lg mb-6">
//               Filter Products
//             </h2>
//             <form>
//               <fieldset className="mb-6">
//                 <legend className="text-green-900 font-semibold mb-3 block">
//                   Product Type
//                 </legend>
//                 <div className="flex flex-col space-y-2 text-gray-700 font-normal text-sm">
//                   {[
//                     "Round Plates",
//                     "Compartment Plates",
//                     "Meal Trays",
//                     "Bowls",
//                     "Antileak Containers",
//                     "Lids",
//                     "Clamshells",
//                     "Sipper Lids",
//                   ].map((type) => (
//                     <label
//                       key={type}
//                       className="inline-flex items-center cursor-pointer"
//                     >
//                       <input
//                         className="form-checkbox text-green-900"
//                         type="checkbox"
//                         value={type}
//                         checked={selectedProductType.includes(type)}
//                         onChange={handleProductTypeChange}
//                       />
//                       <span className="ml-2">{type}</span>
//                     </label>
//                   ))}
//                 </div>
//               </fieldset>
//               <fieldset className="mb-6">
//                 <legend className="text-green-900 font-semibold mb-3 block">
//                   Capacity/Size
//                 </legend>
//                 <select
//                   className="w-full border border-gray-300 rounded-md py-2 px-3 text-gray-700 text-sm focus:outline-none focus:ring-2 focus:ring-green-900"
//                   value={selectedCapacity}
//                   onChange={handleCapacityChange}
//                 >
//                   <option>All Sizes</option>
//                   <option>Small</option>
//                   <option>Medium</option>
//                   <option>Large</option>
//                 </select>
//               </fieldset>
//               <fieldset className="mb-6">
//                 <legend className="text-green-900 font-semibold mb-3 block">
//                   Compartments
//                 </legend>
//                 <select
//                   className="w-full border border-gray-300 rounded-md py-2 px-3 text-gray-700 text-sm focus:outline-none focus:ring-2 focus:ring-green-900"
//                   value={selectedCompartments}
//                   onChange={handleCompartmentsChange}
//                 >
//                   <option>Any</option>
//                   <option>1</option>
//                   <option>2</option>
//                   <option>3</option>
//                   <option>4+</option>
//                 </select>
//               </fieldset>
//               <button
//                 className="w-full bg-green-900 text-white font-semibold py-2 rounded-md hover:bg-green-800 transition"
//                 type="button"
//               >
//                 Apply Filters
//               </button>
//               <button
//                 className="mt-4 w-full text-green-900 font-normal text-sm underline hover:text-green-700"
//                 type="button"
//                 onClick={handleClearFilters}
//               >
//                 Clear All
//               </button>
//             </form>
//           </aside>
//           <section className="flex-1">
//             <div className="flex flex-col sm:flex-row justify-between items-center mb-6">
//               <h2 className="text-green-900 font-semibold text-xl mb-4 sm:mb-0">
//                 All Products
//               </h2>
//               <div className="flex items-center space-x-2 text-gray-900 text-sm">
//                 <label className="whitespace -nowrap" htmlFor="sort">
//                   Sort by:
//                 </label>
//                 <select
//                   className="border border-gray-300 rounded-md py-1 px-2 text-gray-700 text-sm focus:outline-none focus:ring-2 focus:ring-green-900"
//                   id="sort"
//                   value={sortBy}
//                   onChange={handleSortByChange}
//                 >
//                   <option>Popularity</option>
//                   <option>Price: Low to High</option>
//                   <option>Price: High to Low</option>
//                   <option>Newest</option>
//                 </select>
//               </div>
//             </div>
//             <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
//               {/* Product Card 1 */}
//               <article className="bg-white border border-gray-200 rounded-lg shadow-sm p-4 relative flex flex-col">
//                 <img
//                   alt="Round plate with a smaller white plate on top, placed on a white background"
//                   className="rounded-lg mb-4"
//                   height="300"
//                   src="https://storage.googleapis.com/a1aa/image/a9dc8c3e-1cae-4438-e1c5-c90bd51caad3.jpg"
//                   width="400"
//                 />
//                 <span className="absolute top-4 right-4 bg-green-600 text-white text-xs font-semibold px-3 py-1 rounded-full">
//                   Round Plates
//                 </span>
//                 <h3 className="text-green-900 font-semibold text-lg mb-1">
//                   Round Plate - 9"
//                 </h3>
//                 <p className="text-gray-600 text-sm mb-2 flex items-center gap-1">
//                   <i className="fas fa-ruler-combined text-gray-400"></i> 9 inch
//                   / 23 cm
//                 </p>
//                 <p className="text-gray-700 text-sm mb-4 flex-grow">
//                   Sturdy, heat-resistant, and microwave-safe round plate for all
//                   food types.
//                 </p>
//                 <div className="flex justify-between items-center">
//                   <button className="bg-green-900 text-white text-sm font-semibold py-2 px-4 rounded hover:bg-green-800 transition">
//                     View Details
//                   </button>
//                   <button
//                     aria-label="Add round plate to cart"
//                     className="text-green-900 border border-green-900 rounded-full p-2 hover:bg-green-900 hover:text-white transition"
//                   >
//                     <i className="fas fa-plus"></i>
//                   </button>
//                 </div>
//               </article>
//               {/* Product Card 2 */}
//               <article className="bg-white border border-gray-200 rounded-lg shadow-sm p-4 relative flex flex-col">
//                 <img
//                   alt="3-compartment eco-friendly meal tray with vegetables and food, placed on a white background with a green leaf behind"
//                   className="rounded-lg mb-4"
//                   height="300"
//                   src="https://storage.googleapis.com/a1aa/image/53fc5d38-3356-45bf-e510-15104cc009e8.jpg"
//                   width="400"
//                 />
//                 <span className="absolute top-4 right-4 bg-green-600 text-white text-xs font-semibold px-3 py-1 rounded-full">
//                   Meal Trays
//                 </span>
//                 <h3 className="text-green-900 font-semibold text-lg mb-1">
//                   3-Compartment Tray
//                 </h3>
//                 <p className="text-gray-600 text-sm mb-2 flex items-center gap-1">
//                   <i className="fas fa-ruler-combined text-gray-400"></i> 10
//                   inch / 25 cm
//                 </p>
//                 <p className="text-gray-700 text-sm mb-4 flex-grow">
//                   Perfect for meal prep and portion control with three separate
//                   sections.
//                 </p>
//                 <div className="flex justify-between items-center">
//                   <button className="bg-green-900 text-white text-sm font-semibold py-2 px-4 rounded hover:bg-green-800 transition">
//                     View Details
//                   </button>
//                   <button
//                     aria-label="Add 3-compartment tray to cart"
//                     className="text-green-900 border border-green-900 rounded-full p-2 hover:bg-green-900 hover:text-white transition"
//                   >
//                     <i className="fas fa-plus"></i>
//                   </button>
//                 </div>
//               </article>
//               {/* Additional product cards can be added here following the same structure */}
//             </div>
//           </section>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default ProductSection;

import React, { useState } from "react";

const ProductCard = ({ product }) => {
  return (
    <article className="bg-white border border-gray-200 rounded-lg shadow-sm p-4 relative flex flex-col">
      <img
        alt={product.name}
        className="rounded-lg mb-4"
        height="300"
        src={product.image}
        width="400"
      />
      <span className="absolute top-4 right-4 bg-green-600 text-white text-xs font-semibold px-3 py-1 rounded-full">
        {product.category}
      </span>
      <h3 className="text-green-900 font-semibold text-lg mb-1">
        {product.name}
      </h3>
      <p className="text-gray-600 text-sm mb-2 flex items-center gap-1">
        <i className="fas fa-ruler-combined text-gray-400"></i> {product.size}
      </p>
      <p className="text-gray-700 text-sm mb-4 flex-grow">
        {product.description}
      </p>
      <div className="flex justify-between items-center">
        <button className="bg-green-900 text-white text-sm font-semibold py-2 px-4 rounded hover:bg-green-800 transition">
          View Details
        </button>
        <button
          aria-label={`Add ${product.name} to cart`}
          className="text-green-900 border border-green-900 rounded-full p-2 hover:bg-green-900 hover:text-white transition"
        >
          <i className="fas fa-plus"></i>
        </button>
      </div>
    </article>
  );
};

const ProductSection = ({ products }) => {
  const [selectedProductType, setSelectedProductType] = useState([]);
  const [selectedCapacity, setSelectedCapacity] = useState("");
  const [selectedCompartments, setSelectedCompartments] = useState("");
  const [sortBy, setSortBy] = useState("Popularity");
  const [currentPage, setCurrentPage] = useState(1);
  const productsPerPage = 6;

  const handleProductTypeChange = (e) => {
    const { value, checked } = e.target;
    if (checked) {
      setSelectedProductType([...selectedProductType, value]);
    } else {
      setSelectedProductType(
        selectedProductType.filter((type) => type !== value)
      );
    }
  };

  const handleCapacityChange = (e) => {
    setSelectedCapacity(e.target.value);
  };

  const handleCompartmentsChange = (e) => {
    setSelectedCompartments(e.target.value);
  };

  const handleSortByChange = (e) => {
    setSortBy(e.target.value);
  };

  const handleClearFilters = () => {
    setSelectedProductType([]);
    setSelectedCapacity("");
    setSelectedCompartments("");
  };

  const filteredProducts = products.filter((product) => {
    if (
      selectedProductType.length > 0 &&
      !selectedProductType.includes(product.category)
    ) {
      return false;
    }
    if (selectedCapacity && product.size !== selectedCapacity) {
      return false;
    }
    if (selectedCompartments && product.compartments !== selectedCompartments) {
      return false;
    }
    return true;
  });

  const sortedProducts = filteredProducts;

  const indexOfLastProduct = currentPage * productsPerPage;
  const indexOfFirstProduct = indexOfLastProduct - productsPerPage;
  const currentProducts = sortedProducts.slice(
    indexOfFirstProduct,
    indexOfLastProduct
  );

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  return (
    <div className="bg-white text-gray-900 font-sans bg-[#F0F9F4]">
      <div className="max-w-7xl mx-auto px-4 py-10">
        <div className="flex flex-col lg:flex-row gap-8 ">
          <aside className="w-full lg:w-72 bg-white border border-gray-200 rounded-lg p-6 shadow-sm ">
            <h2 className="text-green-900 font-semibold text-lg mb-6">
              Filter Products
            </h2>
            <form>
              <fieldset className="mb-6">
                <legend className="text-green-900 font-semibold mb-3 block">
                  Product Type
                </legend>
                <div className="flex flex-col space-y-2 text-gray-700 font-normal text-sm">
                  {[
                    "Round Plates",
                    "Compartment Plates",
                    "Meal Trays",
                    "Bowls",
                    "Antileak Containers",
                    "Lids",
                    "Clamshells",
                    "Sipper Lids",
                  ].map((type) => (
                    <label className="inline-flex items-center cursor-pointer">
                      <input
                        className="form-checkbox text-green-900"
                        type="checkbox"
                        value={type}
                        checked={selectedProductType.includes(type)}
                        onChange={handleProductTypeChange}
                      />
                      <span className="ml-2">{type}</span>
                    </label>
                  ))}
                </div>
              </fieldset>

              <button
                type="button"
                onClick={handleClearFilters}
                className="bg-red-500 text-white font-semibold py-2 px-4 rounded hover:bg-red-400 transition"
              >
                Clear Filters
              </button>
            </form>
          </aside>
          <main className="flex-1">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-green-900 font-semibold text-lg">Products</h2>
              <select
                value={sortBy}
                onChange={handleSortByChange}
                className="border border-gray-300 rounded p-2"
              >
                {[
                  "Popularity",
                  "Price: Low to High",
                  "Price: High to Low",
                  "Newest",
                ].map((option) => (
                  <option key={option} value={option}>
                    {option}
                  </option>
                ))}
              </select>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
              {currentProducts.map((product) => (
                <ProductCard key={product.name} product={product} />
              ))}
            </div>
            <div className="flex justify-center mt-6">
              <button
                className="bg-green-900 text-white font-semibold py-2 px-4 rounded hover:bg-green-800 transition"
                onClick={() => handlePageChange(currentPage - 1)}
                disabled={currentPage === 1}
              >
                Prev
              </button>
              {Array(Math.ceil(sortedProducts.length / productsPerPage))
                .fill(null)
                .map((_, index) => (
                  <button
                    key={index}
                    className={`mx-2 ${
                      currentPage === index + 1
                        ? "bg-green-900 text-white"
                        : "text-green-900"
                    } font-semibold py-2 px-4 rounded hover:bg-green-800 transition`}
                    onClick={() => handlePageChange(index + 1)}
                  >
                    {index + 1}
                  </button>
                ))}
              <button
                className="bg-green-900 text-white font-semibold py-2 px-4 rounded hover:bg-green-800 transition"
                onClick={() => handlePageChange(currentPage + 1)}
                disabled={
                  currentPage ===
                  Math.ceil(sortedProducts.length / productsPerPage)
                }
              >
                Next
              </button>
            </div>
          </main>
        </div>
      </div>
    </div>
  );
};

export default ProductSection;
